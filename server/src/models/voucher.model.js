"use strict";

const mongoose = require('mongoose');
const { Schema } = mongoose;

const VoucherSchema = new Schema({
    voucher_name: { type: String, required: true, unique: true },  // T√™n voucher, ph·∫£i duy nh·∫•t
    voucher_description: { type: String, required: true },  // M√¥ t·∫£ voucher
    voucher_code: { type: String, required: true, unique: true }, // M√£ voucher, ph·∫£i duy nh·∫•t
    voucher_type: { type: String, enum: ["system", "user"], default: "system" }, // "system" (h·ªá th·ªëng) ho·∫∑c "user" (do user ƒë·ªïi ƒëi·ªÉm)
    voucher_thumb: { type: String, required: true }, // H√¨nh thumbnail
    voucher_banner_image: { type: String, required: true }, // H√¨nh banner qu·∫£ng c√°o
    voucher_method: { type: String, enum: ["percent", "fixed"], required: true }, // "percent" ho·∫∑c "fixed"
    voucher_value: { type: Number, required: true }, // Gi√° tr·ªã gi·∫£m gi√° (VD: 10% ho·∫∑c 50,000 VND)
    voucher_start_date: { type: Date, required: true },
    voucher_end_date: { type: Date, required: true },
    voucher_max_uses: { type: Number, required: true }, // S·ªë l·∫ßn t·ªëi ƒëa m√£ gi·∫£m gi√° c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng
    voucher_uses_count: { type: Number, default: 0 }, // S·ªë l·∫ßn ƒë√£ s·ª≠ d·ª•ng
    voucher_users_used: [{ type: String }], // danh s√°ch ng∆∞·ªùi ƒë√£ s·ª≠ d·ª•ng
    voucher_max_price: { type: Number, default: null }, // M·ª©c gi·∫£m t·ªëi ƒëa (n·∫øu l√† percent)
    voucher_min_order_value: { type: Number, required: true }, // Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu ƒë·ªÉ √°p d·ª•ng voucher
 voucher_is_active: { type: Boolean, default: true },
    voucher_required_points: { type: Number, default: 0 }
}, {
    timestamps: true
});

// üîç Middleware ki·ªÉm tra tr√πng l·∫∑p voucher_code & voucher_name
const checkVoucherUnique = async function (next) {
    try {
        const voucher = this instanceof mongoose.Document ? this : this.getUpdate(); // X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu

        if (!voucher.voucher_name || !voucher.voucher_code) {
            return next(); // N·∫øu kh√¥ng c√≥ voucher_name ho·∫∑c voucher_code, b·ªè qua ki·ªÉm tra
        }

        const query = {
            $or: [
                { voucher_name: voucher.voucher_name },
                { voucher_code: voucher.voucher_code }
            ]
        };

        if (this instanceof mongoose.Query) {
            query._id = { $ne: this.getQuery()._id }; // N·∫øu update, b·ªè qua ch√≠nh n√≥
        } else if (voucher._id) {
            query._id = { $ne: voucher._id }; // N·∫øu l√† document, c≈©ng b·ªè qua ch√≠nh n√≥
        }

        next(); // Kh√¥ng c√≥ l·ªói th√¨ ti·∫øp t·ª•c
    } catch (error) {
        next(error);
    }
};

// üîπ Ch·ªâ √°p d·ª•ng middleware khi t·∫°o m·ªõi ho·∫∑c update voucher_name, voucher_code
VoucherSchema.pre('save', checkVoucherUnique);
VoucherSchema.pre('findOneAndUpdate', checkVoucherUnique);
VoucherSchema.pre('updateOne', checkVoucherUnique);

module.exports = mongoose.model('Voucher', VoucherSchema);

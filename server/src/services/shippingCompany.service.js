'use strict';

const { RequestError, NotFoundError } = require('../core/error.response');
const ShippingCompany = require('../models/shippingCompany.model');

class ShippingCompanyService {
    // Táº¡o cÃ´ng ty váº­n chuyá»ƒn má»›i
    static async createShippingCompany(payload) {
        const { sc_name, sc_phone, sc_email, sc_shipping_price } = payload;
    
        if (!sc_name || !sc_phone || sc_shipping_price === undefined) {
            throw new RequestError('Thiáº¿u thÃ´ng tin báº¯t buá»™c!');
        }
    
        // Kiá»ƒm tra trÃ¹ng tÃªn
        const existingName = await ShippingCompany.findOne({ sc_name });
        if (existingName) {
            throw new RequestError('TÃªn cÃ´ng ty Ä‘Ã£ tá»“n táº¡i!');
        }
    
        // Kiá»ƒm tra trÃ¹ng sá»‘ Ä‘iá»‡n thoáº¡i
        const existingPhone = await ShippingCompany.findOne({ sc_phone });
        if (existingPhone) {
            throw new RequestError('Sá»‘ Ä‘iá»‡n thoáº¡i Ä‘Ã£ Ä‘Æ°á»£c sá»­ dá»¥ng!');
        }
    
        // Kiá»ƒm tra trÃ¹ng email (náº¿u cÃ³ nháº­p)
        if (sc_email) {
            const existingEmail = await ShippingCompany.findOne({ sc_email });
            if (existingEmail) {
                throw new RequestError('Email Ä‘Ã£ Ä‘Æ°á»£c sá»­ dá»¥ng!');
            }
        }
    
        return await ShippingCompany.create(payload);
    }
    
    // Láº¥y danh sÃ¡ch táº¥t cáº£ cÃ´ng ty váº­n chuyá»ƒn
    static async getAllShippingCompanies({ limit, page }) {
        if (!(limit && page)) {
            return await ShippingCompany.find({ sc_active: true });
        }
        const skipNum = page * limit;
        const ShippingCompanies = await ShippingCompany.find().select('-__v -createdAt -updatedAt').sort({ createdAt: -1 }).skip(skipNum).limit(limit).lean();
        const totalShippingCompany = await ShippingCompany.countDocuments();
        return {
            totalPage: Math.ceil(totalShippingCompany / limit) - 1 || 0, // Tá»•ng sá»‘ trang (0-based)
            currentPage: page || 0,
            totalShippingCompany,
            ShippingCompanies,
        };
    }

    // Láº¥y cÃ´ng ty váº­n chuyá»ƒn theo ID
    static async getShippingCompanyById(id) {
        const shippingCompany = await ShippingCompany.findById(id);
        if (!shippingCompany) throw new NotFoundError('CÃ´ng ty váº­n chuyá»ƒn khÃ´ng tá»“n táº¡i!');
        return shippingCompany;
    }

    // Cáº­p nháº­t cÃ´ng ty váº­n chuyá»ƒn theo ID
    static async updateShippingCompany(id, data) {
        const { sc_name, sc_phone, sc_email } = data;

        // Kiá»ƒm tra trÃ¹ng tÃªn cÃ´ng ty (trá»« chÃ­nh báº£n thÃ¢n nÃ³)
        const nameExists = await ShippingCompany.findOne({ sc_name, _id: { $ne: id } });
        if (nameExists) throw new RequestError("TÃªn cÃ´ng ty Ä‘Ã£ tá»“n táº¡i!");

        // Kiá»ƒm tra trÃ¹ng sá»‘ Ä‘iá»‡n thoáº¡i
        const phoneExists = await ShippingCompany.findOne({ sc_phone, _id: { $ne: id } });
        if (phoneExists) throw new RequestError("Sá»‘ Ä‘iá»‡n thoáº¡i Ä‘Ã£ tá»“n táº¡i!");

        // Kiá»ƒm tra trÃ¹ng email náº¿u cÃ³
        if (sc_email) {
            const emailExists = await ShippingCompany.findOne({ sc_email, _id: { $ne: id } });
            if (emailExists) throw new RequestError("Email Ä‘Ã£ tá»“n táº¡i!");
        }

        // Tiáº¿n hÃ nh cáº­p nháº­t
        const updated = await ShippingCompany.findByIdAndUpdate(id, data, { new: true });
        if (!updated) throw new NotFoundError("KhÃ´ng tÃ¬m tháº¥y cÃ´ng ty váº­n chuyá»ƒn!");

        return updated;
    }
    


    // XÃ³a cÃ´ng ty váº­n chuyá»ƒn theo ID
    static async deleteShippingCompany(id) {
        const shippingCompany = await ShippingCompany.findByIdAndDelete(id);
        if (!shippingCompany) throw new NotFoundError('CÃ´ng ty váº­n chuyá»ƒn khÃ´ng tá»“n táº¡i!');
        return shippingCompany;
    }

    // ðŸ”¹ TÃ¬m kiáº¿m cÃ´ng ty váº­n chuyá»ƒn theo tÃªn
    static async searchShippingCompaniesByName(name) {
        if (!name) throw new RequestError('Vui lÃ²ng nháº­p tÃªn cÃ´ng ty, email hoáº·c sá»‘ Ä‘iá»‡n thoáº¡i Ä‘á»ƒ tÃ¬m kiáº¿m');
    
        const companies = await ShippingCompany.find({
            $or: [
                { sc_name: { $regex: name, $options: 'i' } },  // TÃ¬m kiáº¿m theo tÃªn cÃ´ng ty
                { sc_email: { $regex: name, $options: 'i' } }, // TÃ¬m kiáº¿m theo email
                { sc_phone: { $regex: name, $options: 'i' } }, // TÃ¬m kiáº¿m theo sá»‘ Ä‘iá»‡n thoáº¡i
            ],
        });
    
        if (companies.length === 0) throw new NotFoundError('KhÃ´ng tÃ¬m tháº¥y cÃ´ng ty nÃ o');
    
        return companies;
    }
    
}

module.exports = ShippingCompanyService;

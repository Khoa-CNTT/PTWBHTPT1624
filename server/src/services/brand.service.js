"use strict";

const { BadRequestError, NotFoundError } = require("../core/error.response");
const Brand = require("../models/brand.model");

class BrandService {
  // T·∫°o th∆∞∆°ng hi·ªáu m·ªõi
  static async createBrand(payload) {
    if (!payload.brand_name || !payload.brand_thumb || !payload.brand_banner_image) {
      throw new BadRequestError("Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc!");
    }
    return await Brand.create(payload);
  }

  // L·∫•y danh s√°ch t·∫•t c·∫£ th∆∞∆°ng hi·ªáu
  static async getAllBrands() {
    return await Brand.find();
  }

  // L·∫•y th∆∞∆°ng hi·ªáu theo ID
  static async getBrandById(id) {
    const brand = await Brand.findById(id);
    if (!brand) throw new NotFoundError("Th∆∞∆°ng hi·ªáu kh√¥ng t·ªìn t·∫°i!");
    return brand;
  }

  // C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu theo ID
  static async updateBrand(id, payload) {
    const updatedBrand = await Brand.findByIdAndUpdate(id, payload, { new: true });
    if (!updatedBrand) throw new NotFoundError("Th∆∞∆°ng hi·ªáu kh√¥ng t·ªìn t·∫°i!");
    return updatedBrand;
  }

  // X√≥a th∆∞∆°ng hi·ªáu theo ID
  static async deleteBrand(id) {
    const brand = await Brand.findByIdAndDelete(id);
    if (!brand) throw new NotFoundError("Th∆∞∆°ng hi·ªáu kh√¥ng t·ªìn t·∫°i!");
    return brand;
  }

  // üîπ T√¨m ki·∫øm th∆∞∆°ng hi·ªáu theo t√™n
  static async searchBrandByName(name) {
    return await Brand.find({ brand_name: { $regex: name, $options: "i" } });
  }
}

module.exports = BrandService;

"use strict";
const Voucher = require("../models/voucher.model");
const { BadRequestError, NotFoundError } = require("../core/error.response");
const voucherModel = require("../models/voucher.model");

class VoucherService {
  // T·∫°o voucher m·ªõi
  static async createVoucher(payload) {
    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (
      !payload.voucher_name ||
      !payload.voucher_description ||
      !payload.voucher_start_date ||
      !payload.voucher_end_date ||
      !payload.voucher_method ||
      !payload.voucher_value ||
      !payload.voucher_max_uses ||
      !payload.voucher_min_order_value ||
      !payload.voucher_code
    ) {
      throw new BadRequestError("Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc!");
    }
    // Ki·ªÉm tra m√£ voucher c√≥ b·ªã tr√πng kh√¥ng
    const existingVoucher = await voucherModel.findOne({ voucher_code: payload.voucher_code });
    if (existingVoucher) {
      throw new BadRequestError("Voucher code ƒë√£ t·ªìn t·∫°i!");
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y h·∫øt h·∫°n
    const startDate = new Date(payload.voucher_start_date);
    const endDate = new Date(payload.voucher_end_date);
    if (startDate >= endDate) {
      throw new BadRequestError("Ng√†y h·∫øt h·∫°n ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu!");
    }

    // Ki·ªÉm tra gi√° tr·ªã voucher h·ª£p l·ªá (gi√° tr·ªã voucher v√† gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu ph·∫£i l·ªõn h∆°n 0)
    if (payload.voucher_value <= 0) {
      throw new BadRequestError("Gi√° tr·ªã voucher ph·∫£i l·ªõn h∆°n 0!");
    }
    if (payload.voucher_min_order_value <= 0) {
      throw new BadRequestError("Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu ph·∫£i l·ªõn h∆°n 0!");
    }

    // T·∫°o voucher m·ªõi
    const voucher = await voucherModel.create(payload);

    try {
      // ƒê·∫£m b·∫£o voucher_code l√† chu·ªói h·ª£p l·ªá
      if (typeof payload.voucher_code !== "string" || payload.voucher_code.trim() === "") {
        throw new BadRequestError("M√£ voucher kh√¥ng h·ª£p l·ªá!");
      }
      // Ki·ªÉm tra xem voucher_code ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingVoucher = await voucherModel.findOne({ voucher_code: payload.voucher_code });
      // T·∫°o voucher m·ªõi
      const voucher = await voucherModel.create(payload);
      return voucher;
    } catch (error) {
      throw error;
    }
  }

  // L·∫•y danh s√°ch t·∫•t c·∫£ voucher
  static async getAllVouchers() {
    return await voucherModel.find();
  }

  // L·∫•y voucher theo ID
  static async getVoucherById(id) {
    const voucher = await voucherModel.findById(id);
    if (!voucher) throw new NotFoundError("Voucher kh√¥ng t·ªìn t·∫°i!");
    return voucher;
  }

  // C·∫≠p nh·∫≠t voucher theo ID
  static async updateVoucher(id, payload) {
    const updatedVoucher = await voucherModel.findByIdAndUpdate(id, payload, { new: true });
    if (!updatedVoucher) throw new NotFoundError("Voucher kh√¥ng t·ªìn t·∫°i!");
    return updatedVoucher;
  }

  // X√≥a voucher theo ID
  static async deleteVoucher(id) {
    const voucher = await voucherModel.findByIdAndDelete(id);
    if (!voucher) throw new NotFoundError("Voucher kh√¥ng t·ªìn t·∫°i!");
    return voucher;
  }

  // üîπ T√¨m ki·∫øm voucher theo t√™n
  static async searchVoucherByName(name) {
    const vouchers = await voucherModel.find({
      voucher_name: { $regex: new RegExp(name, "i") }
    });
    if (!vouchers.length) throw new NotFoundError("Kh√¥ng t√¨m th·∫•y voucher ph√π h·ª£p!");
    return vouchers;
  }
}

module.exports = VoucherService;

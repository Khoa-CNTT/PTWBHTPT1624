"use strict";
const Voucher = require("../models/voucher.model");
const { BadRequestError, NotFoundError } = require("../core/error.response");
const voucherModel = require("../models/voucher.model");
const autoCode = require("../utils/autoCode");

class VoucherService {
  // T·∫°o voucher m·ªõi
  static async createVoucher(payload) {
    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (
      !payload.voucher_name ||
      !payload.voucher_description ||
      !payload.voucher_start_date ||
      !payload.voucher_end_date ||
      !payload.voucher_method ||
      !payload.voucher_value ||
      !payload.voucher_max_uses ||
      !payload.voucher_min_order_value
    ) {
      throw new BadRequestError("Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc!");
    }

    // Ki·ªÉm tra t√™n voucher c√≥ b·ªã tr√πng kh√¥ng
    const existingVoucher = await voucherModel.findOne({
      voucher_name: payload.voucher_name,
    });
    if (existingVoucher) {
      throw new BadRequestError("T√™n voucher code ƒë√£ t·ªìn t·∫°i!");
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y h·∫øt h·∫°n
    const startDate = new Date(payload.voucher_start_date);
    const endDate = new Date(payload.voucher_end_date);
    if (startDate >= endDate) {
      throw new BadRequestError("Ng√†y h·∫øt h·∫°n ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu!");
    }

    // Ki·ªÉm tra gi√° tr·ªã voucher h·ª£p l·ªá (gi√° tr·ªã voucher v√† gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu ph·∫£i l·ªõn h∆°n 0)
    if (payload.voucher_value <= 0) {
      throw new BadRequestError("Gi√° tr·ªã voucher ph·∫£i l·ªõn h∆°n 0!");
    }
    if (payload.voucher_min_order_value <= 0) {
      throw new BadRequestError("Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu ph·∫£i l·ªõn h∆°n 0!");
    }

    // T·∫°o voucher m·ªõi
    const voucher = await voucherModel.create({
      ...payload,
      voucher_code: autoCode(payload.voucher_name),
    });
    return voucher;
  }

  // L·∫•y danh s√°ch t·∫•t c·∫£ voucher
  static async getAllVouchers({ limit, page }) {
    const limitNum = parseInt(limit, 10); // M·∫∑c ƒë·ªãnh limit = 10
    const pageNum = parseInt(page, 10); // M·∫∑c ƒë·ªãnh page = 0
    const skipNum = pageNum * limitNum;
    const vouchers = await voucherModel
      .find()
      .sort({ createdAt: -1 })
      .skip(skipNum)
      .select("-__v -createdAt -updatedAt")
      .limit(limitNum)
      .lean();
    const totalVoucher = await voucherModel.countDocuments();
    return {
      totalPage: Math.ceil(totalVoucher / limitNum) - 1 || 0, // T·ªïng s·ªë trang (0-based)
      currentPage: pageNum || 0,
      totalVoucher,
      vouchers,
    };
  }

  // L·∫•y voucher theo ID
  static async getVoucherById(id) {
    const voucher = await voucherModel.findById(id);
    if (!voucher) throw new NotFoundError("Voucher kh√¥ng t·ªìn t·∫°i!");
    return voucher;
  }

  // C·∫≠p nh·∫≠t voucher theo ID
  static async updateVoucher(id, payload) {
    // Ki·ªÉm tra t√™n voucher c√≥ b·ªã tr√πng kh√¥ng
    const existingVoucher = await voucherModel.findOne({
      voucher_name: payload.voucher_name,
    });
    if (existingVoucher) {
      throw new BadRequestError("T√™n voucher code ƒë√£ t·ªìn t·∫°i!");
    }
    const updatedVoucher = await voucherModel.findByIdAndUpdate(
      id,
      { ...payload, voucher_code: autoCode(payload.voucher_name) },
      { new: true }
    );
    if (!updatedVoucher) throw new NotFoundError("Voucher kh√¥ng t·ªìn t·∫°i!");
    return updatedVoucher;
  }

  // X√≥a voucher theo ID
  static async deleteVoucher(id) {
    const voucher = await voucherModel.findByIdAndDelete(id);
    if (!voucher) throw new NotFoundError("Voucher kh√¥ng t·ªìn t·∫°i!");
    return voucher;
  }

  // üîπ T√¨m ki·∫øm voucher theo t√™n
  static async searchVoucherByName(name) {
    const vouchers = await voucherModel.find({
      $or: [
        { voucher_name: { $regex: new RegExp(name, "i") } },
        { voucher_code: { $regex: new RegExp(name, "i") } },
      ],
    });
  
    if (!vouchers.length) {
      throw new NotFoundError("Kh√¥ng t√¨m th·∫•y voucher ph√π h·ª£p!");
    }
    
    return vouchers;
  }
  

  // √Åp d·ª•ng voucher
  static async applyVoucher({ code, orderValue }) {
    const voucher = await Voucher.findOne({
      voucher_code: code,
      voucher_is_active: true,
      voucher_start_date: { $lte: new Date() },
      voucher_end_date: { $gte: new Date() },
      voucher_max_uses: { $gt: 0 },
    });

    if (!voucher) {
      throw new BadRequestError('M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    if (orderValue < voucher.voucher_min_order_value) {
      throw new BadRequestError(`ƒê∆°n h√†ng c·∫ßn t·ªëi thi·ªÉu ${voucher.voucher_min_order_value} VND ƒë·ªÉ √°p d·ª•ng m√£`);
    }

    let discount = 0;
    if (voucher.voucher_method === 'percent') {
      discount = (orderValue * voucher.voucher_value) / 100;
      if (voucher.voucher_max_price) {
        discount = Math.min(discount, voucher.voucher_max_price);
      }
    } else if (voucher.voucher_method === 'fixed') {
      discount = voucher.voucher_value;
    }

    // Gi·∫£m s·ªë l·∫ßn s·ª≠ d·ª•ng voucher
    await Voucher.findByIdAndUpdate(voucher._id, { $inc: { voucher_max_uses: -1 } });

    return {
      discount,
      voucherId: voucher._id,
    };
  }
}

module.exports = VoucherService;

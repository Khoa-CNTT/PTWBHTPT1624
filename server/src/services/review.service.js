'use strict';

const { RequestError, NotFoundError } = require('../core/error.response');
const OnlineOrder = require('../models/OnlineOrder');
const productModel = require('../models/product.model');
const PurchasedModel = require('../models/Purchased.model');
const Review = require('../models/reviews.model');
const userModel = require('../models/user.model');

class ReviewService {
    // üìù T·∫°o ƒë√°nh gi√° m·ªõi
    static async createReview(payload) {
        const { userId, review_productId, review_rating = 0, review_comment, review_images } = payload;
        if (!userId || !review_productId || !review_comment) {
            throw new RequestError('Thi·∫øu th√¥ng tin ƒë·ªÉ t·∫°o ƒë√°nh gi√°');
        }
        const hasPurchased = await PurchasedModel.findOne({
            pc_userId: userId,
            pc_productId: review_productId,
        });

        if (!hasPurchased && review_rating > 0) {
            throw new RequestError('Ch·ªâ ng∆∞·ªùi ƒë√£ mua s·∫£n ph·∫©m m·ªõi ƒë∆∞·ª£c ƒë√°nh gi√° sao');
        }
        if (hasPurchased) {
            hasPurchased.pc_isReviewed = true;
            await hasPurchased.save();
        }
        if (review_rating > 0) {
            // T√¨m t·∫•t c·∫£ review c·ªßa s·∫£n ph·∫©m v√† l·∫•y tr∆∞·ªùng review_rating
            const foundReviews = await Review.find({ review_productId }).select('review_rating');
            // T√≠nh trung b√¨nh review_rating
            let productRatings = 0;
            const totalRating = foundReviews.reduce((sum, review) => sum + review.review_rating, 0);
            productRatings = totalRating / foundReviews.length;
            // C·∫≠p nh·∫≠t product_ratings trong document s·∫£n ph·∫©m
            await productModel.findByIdAndUpdate(
                review_productId,
                {
                    product_ratings: productRatings > 0 ? productRatings : 4.5,
                },
                { new: true }, // Tr·∫£ v·ªÅ document ƒë√£ c·∫≠p nh·∫≠t
            );
        }
        const newReview = await Review.create({
            review_user: userId,
            review_productId,
            review_rating: hasPurchased ? review_rating : 0,
            review_comment,
            review_images,
            isApproved: review_rating > 0 ? true : false,
        });
        await userModel.findByIdAndUpdate(userId, {
            $inc: { user_reward_points: 5000 },
        });
        return newReview;
    }

    // ‚úèÔ∏è C·∫≠p nh·∫≠t ƒë√°nh gi√°
    static async updateReview(payload) {
        const { userId, reviewId, review_productId, review_comment, review_images } = payload;

        if (!userId || !reviewId || !review_productId || !review_comment) {
            throw new RequestError('Thi·∫øu th√¥ng tin ƒë·ªÉ c·∫≠p nh·∫≠t ƒë√°nh gi√°');
        }
        const updatedReview = await Review.findByIdAndUpdate(
            reviewId,
            {
                review_user: userId,
                review_productId,
                review_comment,
                review_images,
            },
            { new: true },
        );

        if (!updatedReview) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√° ƒë·ªÉ c·∫≠p nh·∫≠t');
        }

        return updatedReview;
    }

    // üìñ L·∫•y ƒë√°nh gi√° ƒë√£ duy·ªát cho s·∫£n ph·∫©m (Public)
    static async getReviews({ productId, limit, page, rating }) {
        if (!(limit && page)) {
            return await Review.find({ isApproved: true }).sort({ createdAt: -1 }).lean();
        }
        const limitNum = parseInt(limit, 10); // M·∫∑c ƒë·ªãnh limit = 10
        const pageNum = parseInt(page, 10); // M·∫∑c ƒë·ªãnh page = 0
        const skipNum = pageNum * limitNum;
        const filter = { review_productId: productId, isApproved: true };
        if (rating) {
            filter.review_rating = rating;
        }
        const reviews = await Review.find(filter)
            .sort({ createdAt: -1 })
            .populate('review_user', '_id user_name user_avatar_url')
            .skip(skipNum)
            .limit(limitNum)
            .lean();
        const totalReview = await Review.countDocuments(filter);
        return {
            totalPage: Math.ceil(totalReview / limitNum) || 0, // T·ªïng s·ªë trang (0-based)
            currentPage: pageNum || 0,
            totalReview,
            reviews,
        };
    }

    // üìñ L·∫•y t·∫•t c·∫£ ƒë√°nh gi√° (Admin)
    static async getAllReviews({ limit = 10, page = 0 }) {
        const skip = page * limit;

        const [reviews, totalReview] = await Promise.all([
            Review.find().populate('review_user', '_id user_name user_avatar_url').sort({ createdAt: -1 }).skip(skip).limit(limit).lean(),
            Review.countDocuments(),
        ]);

        return {
            totalPage: Math.ceil(totalReview / limit),
            currentPage: Number(page),
            totalReview,
            reviews,
        };
    }

    // ‚úÖ L·∫•y ƒë√°nh gi√° ƒë√£ duy·ªát
    static async getApprovedReviews({ limit = 10, page = 0 }) {
        const skip = page * limit;

        const [reviews, totalReview] = await Promise.all([
            Review.find({ isApproved: true }).populate('review_user', 'user_name user_avatar_url').sort({ createdAt: -1 }).skip(skip).limit(limit).lean(),
            Review.countDocuments({ isApproved: true }),
        ]);

        return {
            totalPage: Math.ceil(totalReview / limit),
            currentPage: page,
            totalReview,
            reviews,
        };
    }

    // ‚ùå L·∫•y ƒë√°nh gi√° ch∆∞a ƒë∆∞·ª£c duy·ªát
    static async getPendingReviews({ limit = 10, page = 0 }) {
        const skip = page * limit;

        const [reviews, totalReview] = await Promise.all([
            Review.find({ isApproved: false }).populate('review_user', 'user_name user_avatar_url').sort({ createdAt: -1 }).skip(skip).limit(limit).lean(),
            Review.countDocuments({ isApproved: false }),
        ]);

        return {
            totalPage: Math.ceil(totalReview / limit),
            currentPage: page,
            totalReview,
            reviews,
        };
    }

    // ‚úÖ Duy·ªát ƒë√°nh gi√°
    static async approveReview(reviewId) {
        if (!reviewId) throw new RequestError('Thi·∫øu reviewId ƒë·ªÉ duy·ªát ƒë√°nh gi√°');

        const review = await Review.findByIdAndUpdate(reviewId, { isApproved: true }, { new: true });

        if (!review) throw new NotFoundError('Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°');

        return review;
    }
    static async deleteReview(reviewId) {
        if (!reviewId) throw new RequestError('Thi·∫øu reviewId ƒë·ªÉ x√≥a ƒë√°nh gi√°');
        // X√≥a ƒë√°nh gi√°
        const review = await Review.findByIdAndDelete(reviewId);
        if (!review) throw new RequestError('Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°');
        // L·∫•y review_productId t·ª´ review ƒë√£ x√≥a
        if (review.review_rating > 0) {
            const review_productId = review.review_productId;
            // T√¨m t·∫•t c·∫£ review c√≤n l·∫°i c·ªßa s·∫£n ph·∫©m
            const foundReviews = await Review.find({ review_productId }).select('review_rating');
            // T√≠nh trung b√¨nh review_rating
            let productRatings = 0;
            const totalRating = foundReviews.reduce((sum, review) => sum + review.review_rating, 0);
            productRatings = Number((totalRating / foundReviews.length).toFixed(2));
            const updatedProduct = await productModel.findByIdAndUpdate(
                review_productId,
                {
                    product_ratings: productRatings > 0 ? productRatings : 4.5,
                },
                { new: true }, // Tr·∫£ v·ªÅ document ƒë√£ c·∫≠p nh·∫≠t
            );
        }

        return review;
    }
}

module.exports = ReviewService;

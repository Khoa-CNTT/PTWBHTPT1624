"use strict";

const { BadRequestError, NotFoundError } = require("../core/error.response");
const Product = require("../models/product.model");
const Notification = require("../models/notification.model");

class ProductService {
    // T·∫°o s·∫£n ph·∫©m m·ªõi
    static async createProduct(payload) {
        if (Object.keys(payload).length === 0) {
          throw new BadRequestError("Vui l√≤ng cung c·∫•p d·ªØ li·ªáu s·∫£n ph·∫©m");
        }
    
        const product = await Product.create(payload);
    
        // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng
        await Notification.create({
          notification_user: "all", 
          notification_title: "üÜï S·∫£n ph·∫©m m·ªõi v·ª´a ra m·∫Øt!",
          notification_subtitle: `Kh√°m ph√° ngay: ${payload.product_name}`,
          notification_imageUrl: payload.product_thumb, 
          notification_link: `/products/${product._id}`,
          notification_isWatched: false,
        });
    
        return product;
      }

      // Th√™m v√†o ProductService
static async getAllProducts({ limit = 10, page = 1 }) {
  const skip = (page - 1) * limit;
  const products = await Product.find().skip(skip).limit(limit);
  const totalProducts = await Product.countDocuments();

  return {
      products,
      totalPages: Math.ceil(totalProducts / limit),
      currentPage: page,
  };
}


    // L·∫•y s·∫£n ph·∫©m theo ID
    static async getProductById(productId) {
        const product = await Product.findById(productId);
        if (!product) throw new NotFoundError("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m");
        return product;
    }

    // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
    static async updateProduct(productId, updateData) {
        const updatedProduct = await Product.findByIdAndUpdate(productId, updateData, { new: true });
        if (!updatedProduct) throw new NotFoundError("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ c·∫≠p nh·∫≠t");
        return updatedProduct;
    }

    // X√≥a s·∫£n ph·∫©m
    static async deleteProduct(productId) {
        const deletedProduct = await Product.findByIdAndDelete(productId);
        if (!deletedProduct) throw new NotFoundError("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ x√≥a");
        return deletedProduct;
    }
    // T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n
    static async searchProductsByName(name) {
        if (!name) throw new BadRequestError("Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m ƒë·ªÉ t√¨m ki·∫øm");
        const products = await Product.find({
        product_name: { $regex: name, $options: "i" } // T√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
        });
        if (products.length === 0) throw new NotFoundError("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o");
        return products;
    }
}

module.exports = ProductService;

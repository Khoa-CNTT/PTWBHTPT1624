"use strict";

const Notification = require("../models/notification.model.js");
const { NotFoundError, BadRequestError } = require("../core/error.response");
const userModel = require("../models/user.model.js");

class NotificationService {
  // üü¢ L·∫•y th√¥ng b√°o c·ªßa m·ªôt ng∆∞·ªùi d√πng
  static async getUserNotifications(userId) {
    return await Notification.find({ notification_user: userId }).sort({ createdAt: -1 });
  }

  // üü¢ ƒê√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
  static async markAsRead(notificationId) {
    const notification = await Notification.findByIdAndUpdate(
      notificationId,
      { notification_isWatched: true },
      { new: true }
    );
    if (!notification) throw new NotFoundError("Th√¥ng b√°o kh√¥ng t·ªìn t·∫°i!");
    return notification;
  }

  // üî¥ G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng (Admin, Staff)
  static async sendNotificationToAll(payload) {
    if (!payload.notification_title || !payload.notification_subtitle) {
      throw new BadRequestError("Vui l√≤ng cung c·∫•p th√¥ng tin th√¥ng b√°o");
    }

    const users = await userModel.find({}, "_id").lean();
    if (!users.length) throw new NotFoundError("Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o!");

    const notifications = users.map(user => ({
      notification_user: user._id,
      ...payload
    }));

    return await Notification.insertMany(notifications);
  }

  // üî¥ G·ª≠i th√¥ng b√°o ƒë·∫øn m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ (Admin, Staff)
  static async sendNotificationToUser(userId, payload) {
    if (!payload.notification_title || !payload.notification_subtitle) {
      throw new BadRequestError("Vui l√≤ng cung c·∫•p th√¥ng tin th√¥ng b√°o");
    }

    return await Notification.create({
      notification_user: userId,
      ...payload,
    });
  }
}

module.exports = NotificationService;

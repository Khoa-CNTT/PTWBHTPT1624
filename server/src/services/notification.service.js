'use strict';

const Notification = require('../models/notification.model');
const { NotFoundError, RequestError } = require('../core/error.response');
const userModel = require('../models/user.model');

class NotificationService {
    // üü¢ L·∫•y th√¥ng b√°o c·ªßa m·ªôt ng∆∞·ªùi d√πng
    static async getUserNotifications(userId) {
        const notifications = await Notification.find({ notification_user: userId }).sort({ createdAt: -1 }).lean(); // S·ª≠ d·ª•ng lean ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
        // ƒê·∫øm s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
        const unreadCount = await Notification.countDocuments({
            notification_user: userId,
            notification_isWatched: false,
        });
        return {
            notifications, // Danh s√°ch th√¥ng b√°o
            unreadCount, // S·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
        };
    }
    static async getAdminNotifications() {
        // L·∫•y t·∫•t c·∫£ th√¥ng b√°o admin, s·∫Øp x·∫øp theo th·ªùi gian t·∫°o gi·∫£m d·∫ßn
        const notifications = await Notification.find({ notification_type: 'admin' }).sort({ createdAt: -1 }).lean(); // S·ª≠ d·ª•ng lean ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
        // ƒê·∫øm s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
        const unreadCount = await Notification.countDocuments({
            notification_type: 'admin',
            notification_isWatched: false,
        });
        return {
            notifications, // Danh s√°ch th√¥ng b√°o
            unreadCount, // S·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
        };
    }
    // üü¢ ƒê√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
    static async markAsRead(userId) {
        await Notification.updateMany({ notification_user: userId }, { notification_isWatched: true }, { new: true });
    }
    static async markAllAdminNotificationsAsRead() {
        // C·∫≠p nh·∫≠t t·∫•t c·∫£ th√¥ng b√°o admin th√†nh ƒë√£ ƒë·ªçc
        await Notification.updateMany({ notification_type: 'admin' }, { notification_isWatched: true }, { new: true });
        // Ki·ªÉm tra xem c√≥ th√¥ng b√°o n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t kh√¥ng
    }

    // üî¥ G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng (Admin, Staff)
    static async sendNotificationToAll(payload) {
        if (!payload.notification_title || !payload.notification_subtitle) {
            throw new RequestError('Vui l√≤ng cung c·∫•p th√¥ng tin th√¥ng b√°o');
        }

        const users = await userModel.find({}, '_id').lean();
        if (!users.length) throw new NotFoundError('Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o!');

        const notifications = users.map((user) => ({
            notification_user: user._id,
            ...payload,
        }));

        return await Notification.insertMany(notifications);
    }

    // üî¥ G·ª≠i th√¥ng b√°o ƒë·∫øn m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ (Admin, Staff)
    static async sendNotificationToUser(userId, payload) {
        if (!payload.notification_title || !payload.notification_subtitle) {
            throw new RequestError('Vui l√≤ng cung c·∫•p th√¥ng tin th√¥ng b√°o');
        }

        return await Notification.create({
            notification_user: userId,
            ...payload,
        });
    }
    static async sendNotificationToAdmin(payload) {
        if (!payload.notification_title || !payload.notification_subtitle) {
            throw new RequestError('Vui l√≤ng cung c·∫•p th√¥ng tin th√¥ng b√°o');
        }
        return await Notification.create({
            ...payload,
            notification_type: 'admin',
        });
    }
}

module.exports = NotificationService;
